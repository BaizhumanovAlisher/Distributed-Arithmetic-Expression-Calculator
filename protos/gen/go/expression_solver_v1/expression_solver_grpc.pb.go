// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: expression_solver.proto

package expression_solver_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExpressionSolver_SolveExpression_FullMethodName      = "/expression_solver.ExpressionSolver/SolveExpression"
	ExpressionSolver_GetCalculatorsStatus_FullMethodName = "/expression_solver.ExpressionSolver/GetCalculatorsStatus"
)

// ExpressionSolverClient is the client API for ExpressionSolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpressionSolverClient interface {
	SolveExpression(ctx context.Context, in *ExpressionRequest, opts ...grpc.CallOption) (*ExpressionResponse, error)
	GetCalculatorsStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CalculatorList, error)
}

type expressionSolverClient struct {
	cc grpc.ClientConnInterface
}

func NewExpressionSolverClient(cc grpc.ClientConnInterface) ExpressionSolverClient {
	return &expressionSolverClient{cc}
}

func (c *expressionSolverClient) SolveExpression(ctx context.Context, in *ExpressionRequest, opts ...grpc.CallOption) (*ExpressionResponse, error) {
	out := new(ExpressionResponse)
	err := c.cc.Invoke(ctx, ExpressionSolver_SolveExpression_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressionSolverClient) GetCalculatorsStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CalculatorList, error) {
	out := new(CalculatorList)
	err := c.cc.Invoke(ctx, ExpressionSolver_GetCalculatorsStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpressionSolverServer is the server API for ExpressionSolver service.
// All implementations must embed UnimplementedExpressionSolverServer
// for forward compatibility
type ExpressionSolverServer interface {
	SolveExpression(context.Context, *ExpressionRequest) (*ExpressionResponse, error)
	GetCalculatorsStatus(context.Context, *Empty) (*CalculatorList, error)
	mustEmbedUnimplementedExpressionSolverServer()
}

// UnimplementedExpressionSolverServer must be embedded to have forward compatible implementations.
type UnimplementedExpressionSolverServer struct {
}

func (UnimplementedExpressionSolverServer) SolveExpression(context.Context, *ExpressionRequest) (*ExpressionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveExpression not implemented")
}
func (UnimplementedExpressionSolverServer) GetCalculatorsStatus(context.Context, *Empty) (*CalculatorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCalculatorsStatus not implemented")
}
func (UnimplementedExpressionSolverServer) mustEmbedUnimplementedExpressionSolverServer() {}

// UnsafeExpressionSolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpressionSolverServer will
// result in compilation errors.
type UnsafeExpressionSolverServer interface {
	mustEmbedUnimplementedExpressionSolverServer()
}

func RegisterExpressionSolverServer(s grpc.ServiceRegistrar, srv ExpressionSolverServer) {
	s.RegisterService(&ExpressionSolver_ServiceDesc, srv)
}

func _ExpressionSolver_SolveExpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpressionSolverServer).SolveExpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpressionSolver_SolveExpression_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpressionSolverServer).SolveExpression(ctx, req.(*ExpressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpressionSolver_GetCalculatorsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpressionSolverServer).GetCalculatorsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpressionSolver_GetCalculatorsStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpressionSolverServer).GetCalculatorsStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpressionSolver_ServiceDesc is the grpc.ServiceDesc for ExpressionSolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpressionSolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "expression_solver.ExpressionSolver",
	HandlerType: (*ExpressionSolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolveExpression",
			Handler:    _ExpressionSolver_SolveExpression_Handler,
		},
		{
			MethodName: "GetCalculatorsStatus",
			Handler:    _ExpressionSolver_GetCalculatorsStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "expression_solver.proto",
}
